// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  jobseeker
  recruiter
  investor
}

enum Weekday {
  Sun
  Mon
  Tue
  Wed
  Thu
  Fri
  Sat
}

enum JobLocation {
  REMOTE
  ONSITE
  HYBRID
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  FREELANCE
  INTERN
}

enum SalaryRange {
  LOW // LOW = "< $1000"
  MEDIUM // "$1000 - $3000"
  HIGH // "$3000 - $6000"
  VERY_HIGH // "> $6000"
}

enum FeedType {
  media
  event
  article
  live
  text
}

enum ReportType {
  spam
  inappropriate
  harassment
  violence
  other
}

enum JobStatus {
  PENDING
  REVIEWING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

model User {
  id        String  @id @default(uuid())
  email     String  @unique
  fullName  String  @map("full_name")
  role      Role
  password  String
  is_active Boolean @default(true)
  is_staff  Boolean @default(false)

  feeds         Feed[]    @relation("UserFeeds")
  comments      Comment[] @relation("UserComments")
  likedPosts    Feed[]    @relation("postLikes")
  likedComments Comment[] @relation("CommentLikes")
  reportsMade   Report[]  @relation("UserReports")

  // Recruiter-specific
  companyName        String? @map("company_name")
  companyRole        String? @map("company_role")
  companyWebsite     String? @map("company_website")
  companyDescription String? @map("company_description")
  companyLogo        String?
  industry           String?
  companySize        String? @map("company_size")
  additionalInfo     String?

  // Jobseeker/Investor-specific
  currentJobTitle    String?  @map("current_job_title")
  experienceLevel    String?  @map("experience_level")
  primarySkills      String[] @map("primary_skills")
  careerInterests    String?  @map("career_interests")
  locationPreference String?  @map("location_preference")

  resume               String?
  portfolio            String?
  socialLinks          String? @map("social_links")
  about                String?
  phoneNumber          String? @map("phone_number")
  githubProfile        String? @map("github_profile")
  linkedinProfile      String? @map("linkedin_profile")
  twitterProfile       String? @map("twitter_profile")
  dribbbleProfile      String? @map("dribbble_profile")
  behanceProfile       String? @map("behance_profile")
  website              String?
  blog                 String?
  youtubeChannel       String? @map("youtube_channel")
  tiktokProfile        String? @map("tiktok_profile")
  facebookProfile      String? @map("facebook_profile")
  instagramProfile     String? @map("instagram_profile")
  telegramProfile      String? @map("telegram_profile")
  discordProfile       String? @map("discord_profile")
  redditProfile        String? @map("reddit_profile")
  quoraProfile         String? @map("quora_profile")
  mediumProfile        String? @map("medium_profile")
  devtoProfile         String? @map("devto_profile")
  stackoverflowProfile String? @map("stackoverflow_profile")

  profile                 Profile?
  pages                   Page[]
  organizedEvents         Event[]
  newsletterSubscriptions Subscriber[]
  followersSet            Follow[]     @relation("Followers")
  followingSet            Follow[]     @relation("Following")

  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  Enrollment           Enrollment[]
  Streak               Streak[]
  Notification         Notification[]
  NotificationSettings NotificationSettings[]
  JobApplication       JobApplication[]
}

model Profile {
  id       String  @id @default(uuid())
  user     User    @relation(fields: [userId], references: [id])
  userId   String  @unique
  avatar   String?
  verified Boolean @default(false)
}

model Follow {
  id          String   @id @default(uuid())
  follower    User     @relation("Following", fields: [followerId], references: [id])
  following   User     @relation("Followers", fields: [followingId], references: [id])
  followerId  String
  followingId String
  created     DateTime @default(now())

  @@unique([followerId, followingId])
}

model Page {
  id          String   @id @default(uuid())
  title       String
  slug        String   @unique
  content     String
  author      User?    @relation(fields: [authorId], references: [id])
  authorId    String?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  location    String?
  organizer   User?    @relation(fields: [organizerId], references: [id])
  organizerId String?
  isPublic    Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Subscriber {
  id           String       @id @default(uuid())
  email        String       @unique
  user         User?        @relation(fields: [userId], references: [id])
  userId       String?
  subscribedAt DateTime     @default(now())
  newsletters  Newsletter[] @relation("NewsletterSubscribers")
}

model Newsletter {
  id          String       @id @default(uuid())
  subject     String
  body        String
  sendDate    DateTime
  isSent      Boolean      @default(false)
  subscribers Subscriber[] @relation("NewsletterSubscribers")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Course {
  id          String       @id @default(uuid())
  title       String
  imageUrl    String
  enrollments Enrollment[]
}

model Enrollment {
  id           String  @id @default(uuid())
  user         User    @relation(fields: [userId], references: [id])
  userId       String
  course       Course  @relation(fields: [courseId], references: [id])
  courseId     String
  completed    Boolean @default(false)
  hoursSpent   Int     @default(0)
  quizzesTaken Int     @default(0)
}

model Streak {
  id     String  @id @default(uuid())
  user   User    @relation(fields: [userId], references: [id])
  userId String
  day    Weekday
  active Boolean @default(false)
}

model Job {
  id                 String           @id @default(uuid())
  title              String
  company            String
  description        String
  location           JobLocation
  type               JobType
  salary             SalaryRange
  experience         String?
  skills             String[]
  companyLogo        String?
  companyWebsite     String?
  companyEmail       String?
  companyPhone       String?
  companyAddress     String?
  companySize        String?
  companyIndustry    String?
  companyDescription String?
  isRemote           Boolean          @default(false)
  requirements       String[]
  responsibilities   String[]
  benefits           String[]
  applicationLink    String?
  department         String?
  postedAt           DateTime         @default(now())
  updatedAt          DateTime?        @updatedAt
  JobApplication     JobApplication[]
}

model Feed {
  id              Int       @id @default(autoincrement())
  user            User      @relation("UserFeeds", fields: [userId], references: [id])
  userId          String
  type            FeedType
  title           String?
  content         String?
  image           String?
  videoUrl        String?
  eventDate       DateTime?
  liveUrl         String?
  likes           User[]    @relation("postLikes")
  likesCount      Int       @default(0)
  isPublic        Boolean   @default(true)
  isDeleted       Boolean   @default(false)
  isReported      Boolean   @default(false)
  isFlagged       Boolean   @default(false)
  isSpam          Boolean   @default(false)
  isBlocked       Boolean   @default(false)
  isSuspended     Boolean   @default(false)
  isBanned        Boolean   @default(false)
  isDeactivated   Boolean   @default(false)
  isDeletedByUser Boolean   @default(false)
  comments        Comment[]
  commentsCount   Int       @default(0)
  reports         Report[]  @relation("FeedReports")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Comment {
  id            Int      @id @default(autoincrement())
  feed          Feed     @relation(fields: [feedId], references: [id])
  feedId        Int
  user          User     @relation("UserComments", fields: [userId], references: [id])
  userId        String
  likes         User[]   @relation("CommentLikes")
  likedByUser   Boolean  @default(false)
  reported      Boolean  @default(false)
  content       String
  createdAt     DateTime @default(now())
  reportedCount Int      @default(0)
  isDeleted     Boolean  @default(false)
  reports       Report[] @relation("CommentReports")
}

model Report {
  id          Int        @id @default(autoincrement())
  feed        Feed?      @relation("FeedReports", fields: [feedId], references: [id])
  feedId      Int?
  comment     Comment?   @relation("CommentReports", fields: [commentId], references: [id])
  commentId   Int?
  reporter    User       @relation("UserReports", fields: [reporterId], references: [id])
  reporterId  String
  reason      ReportType
  description String?
  createdAt   DateTime   @default(now())
  resolved    Boolean    @default(false)
  isDeleted   Boolean    @default(false)

  @@unique([commentId, reporterId])
  @@unique([feedId, reporterId])
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model NotificationSettings {
  id                String  @id @default(uuid())
  user              User    @relation(fields: [userId], references: [id])
  userId            String
  emailAlerts       Boolean @default(true)
  pushNotifications Boolean @default(true)
  smsAlerts         Boolean @default(false)
}

model JobApplication {
  id                   String    @id @default(uuid())
  job                  Job       @relation(fields: [jobId], references: [id])
  jobId                String
  user                 User      @relation(fields: [userId], references: [id])
  userId               String
  fullName             String
  email                String    @map("email")
  status               JobStatus @default(PENDING)
  resume               String?
  message              String?
  cv                   String?
  coverLetter          String?
  appliedAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  isDeleted            Boolean   @default(false)
  isShortlisted        Boolean   @default(false)
  isAccepted           Boolean   @default(false)
  isRejected           Boolean   @default(false)
  isWithdrawn          Boolean   @default(false)
  isArchived           Boolean   @default(false)
  isFlagged            Boolean   @default(false)
  isReported           Boolean   @default(false)
  isSpam               Boolean   @default(false)
  isBlocked            Boolean   @default(false)
  isSuspended          Boolean   @default(false)
  isBanned             Boolean   @default(false)
  isDeactivated        Boolean   @default(false)
  isDeletedByUser      Boolean   @default(false)
  isDeletedByAdmin     Boolean   @default(false)
  isDeletedBySystem    Boolean   @default(false)
  isDeletedByModerator Boolean   @default(false)
  isDeletedByOwner     Boolean   @default(false)
  isDeletedByCompany   Boolean   @default(false)
  isDeletedByRecruiter Boolean   @default(false)
  isDeletedByInvestor  Boolean   @default(false)
  isDeletedByJobseeker Boolean   @default(false)
}
