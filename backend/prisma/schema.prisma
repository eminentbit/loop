generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Experience {
  id            String    @id @default(uuid())
  userId        String
  title         String
  company       String
  location      String?
  startDate     DateTime
  endDate       DateTime?
  isCurrentRole Boolean   @default(false)
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])
}

model Certification {
  id           String    @id @default(uuid())
  userId       String
  name         String
  issuer       String
  issueDate    DateTime
  expiryDate   DateTime?
  credentialId String?
  url          String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id])
}

model User {
  id                      String                 @id @default(uuid())
  email                   String                 @unique
  fullName                String                 @map("full_name")
  role                    Role
  password                String
  is_active               Boolean                @default(true)
  is_staff                Boolean                @default(false)
  companyName             String?                @map("company_name")
  companyRole             String?                @map("company_role")
  companyWebsite          String?                @map("company_website")
  companyDescription      String?                @map("company_description")
  companyLogo             String?
  industry                String?
  companySize             String?                @map("company_size")
  additionalInfo          String?
  currentJobTitle         String?                @map("current_job_title")
  experienceLevel         String?                @map("experience_level")
  careerInterests         String?                @map("career_interests")
  locationPreference      String?                @map("location_preference")
  resume                  String?
  portfolio               String?
  socialLinks             String?                @map("social_links")
  about                   String?
  phoneNumber             String?                @map("phone_number")
  githubProfile           String?                @map("github_profile")
  linkedinProfile         String?                @map("linkedin_profile")
  twitterProfile          String?                @map("twitter_profile")
  dribbbleProfile         String?                @map("dribbble_profile")
  behanceProfile          String?                @map("behance_profile")
  website                 String?
  blog                    String?
  youtubeChannel          String?                @map("youtube_channel")
  tiktokProfile           String?                @map("tiktok_profile")
  facebookProfile         String?                @map("facebook_profile")
  instagramProfile        String?                @map("instagram_profile")
  telegramProfile         String?                @map("telegram_profile")
  discordProfile          String?                @map("discord_profile")
  redditProfile           String?                @map("reddit_profile")
  quoraProfile            String?                @map("quora_profile")
  mediumProfile           String?                @map("medium_profile")
  devtoProfile            String?                @map("devto_profile")
  stackoverflowProfile    String?                @map("stackoverflow_profile")
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  primarySkills           String[]               @map("primary_skills")
  countryCodNum           Int?
  countryCode             CountryCode?
  certifications          Certification[]
  comments                Comment[]              @relation("UserComments")
  Enrollment              Enrollment[]
  organizedEvents         Event[]
  experiences             Experience[]
  feeds                   Feed[]                 @relation("UserFeeds")
  followingSet            Follow[]               @relation("Following")
  followersSet            Follow[]               @relation("Followers")
  Job                     Job[]
  JobApplication          JobApplication[]
  Notification            Notification[]
  NotificationSettings    NotificationSettings[]
  pages                   Page[]
  profile                 Profile?
  reportsMade             Report[]               @relation("UserReports")
  Streak                  Streak[]
  newsletterSubscriptions Subscriber[]
  likedComments           Comment[]              @relation("CommentLikes")
  likedPosts              Feed[]                 @relation("postLikes")
}

model Profile {
  id       String  @id @default(uuid())
  userId   String  @unique
  avatar   String?
  verified Boolean @default(false)
  user     User    @relation(fields: [userId], references: [id])
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  created     DateTime @default(now())
  follower    User     @relation("Following", fields: [followerId], references: [id])
  following   User     @relation("Followers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Page {
  id          String   @id @default(uuid())
  title       String
  slug        String   @unique
  content     String
  authorId    String?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User?    @relation(fields: [authorId], references: [id])
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  location    String?
  organizerId String?
  isPublic    Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  organizer   User?    @relation(fields: [organizerId], references: [id])
}

model Subscriber {
  id           String       @id @default(uuid())
  email        String       @unique
  userId       String?
  subscribedAt DateTime     @default(now())
  user         User?        @relation(fields: [userId], references: [id])
  newsletters  Newsletter[] @relation("NewsletterSubscribers")
}

model Newsletter {
  id          String       @id @default(uuid())
  subject     String
  body        String
  sendDate    DateTime
  isSent      Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  subscribers Subscriber[] @relation("NewsletterSubscribers")
}

model Course {
  id          String       @id @default(uuid())
  title       String
  imageUrl    String
  enrollments Enrollment[]
}

model Enrollment {
  id           String  @id @default(uuid())
  userId       String
  courseId     String
  completed    Boolean @default(false)
  hoursSpent   Int     @default(0)
  quizzesTaken Int     @default(0)
  course       Course  @relation(fields: [courseId], references: [id])
  user         User    @relation(fields: [userId], references: [id])
}

model Streak {
  id     String  @id @default(uuid())
  userId String
  day    Weekday
  active Boolean @default(false)
  user   User    @relation(fields: [userId], references: [id])
}

model Job {
  id                  String           @id @default(uuid())
  title               String
  company             String
  description         String
  salary              SalaryRange
  postedAt            DateTime         @default(now())
  applicationLink     String?
  benefits            String[]
  companyAddress      String?
  companyDescription  String?
  companyEmail        String?
  companyIndustry     String?
  companyLogo         String?
  companyPhone        String?
  companySize         String?
  companyWebsite      String?
  department          String?
  experience          String?
  isRemote            Boolean          @default(false)
  requirements        String[]
  responsibilities    String[]
  skills              String[]
  updatedAt           DateTime?        @updatedAt
  applicationDeadline DateTime?
  jobType             JobType
  location            String?
  userId              String
  user                User             @relation(fields: [userId], references: [id])
  JobApplication      JobApplication[]
}

model Feed {
  id              Int       @id @default(autoincrement())
  userId          String
  type            FeedType
  title           String?
  content         String?
  image           String?
  videoUrl        String?
  eventDate       DateTime?
  liveUrl         String?
  commentsCount   Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isBanned        Boolean   @default(false)
  isBlocked       Boolean   @default(false)
  isDeactivated   Boolean   @default(false)
  isDeleted       Boolean   @default(false)
  isDeletedByUser Boolean   @default(false)
  isFlagged       Boolean   @default(false)
  isPublic        Boolean   @default(true)
  isReported      Boolean   @default(false)
  isSpam          Boolean   @default(false)
  isSuspended     Boolean   @default(false)
  likesCount      Int       @default(0)
  sharedByUserId  String?
  sharedFromId    Int?
  comments        Comment[]
  user            User      @relation("UserFeeds", fields: [userId], references: [id])
  reports         Report[]  @relation("FeedReports")
  likes           User[]    @relation("postLikes")
}

model Comment {
  id            Int      @id @default(autoincrement())
  feedId        Int
  userId        String
  reported      Boolean  @default(false)
  content       String
  createdAt     DateTime @default(now())
  reportedCount Int      @default(0)
  isDeleted     Boolean  @default(false)
  likedByUser   Boolean  @default(false)
  feed          Feed     @relation(fields: [feedId], references: [id])
  user          User     @relation("UserComments", fields: [userId], references: [id])
  reports       Report[] @relation("CommentReports")
  likes         User[]   @relation("CommentLikes")
}

model Report {
  id          Int        @id @default(autoincrement())
  feedId      Int?
  commentId   Int?
  reporterId  String
  reason      ReportType
  description String?
  createdAt   DateTime   @default(now())
  resolved    Boolean    @default(false)
  isDeleted   Boolean    @default(false)
  comment     Comment?   @relation("CommentReports", fields: [commentId], references: [id])
  feed        Feed?      @relation("FeedReports", fields: [feedId], references: [id])
  reporter    User       @relation("UserReports", fields: [reporterId], references: [id])

  @@unique([commentId, reporterId])
  @@unique([feedId, reporterId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model NotificationSettings {
  id                String  @id @default(uuid())
  userId            String
  emailAlerts       Boolean @default(true)
  pushNotifications Boolean @default(true)
  smsAlerts         Boolean @default(false)
  user              User    @relation(fields: [userId], references: [id])
}

model JobApplication {
  id                   String    @id @default(uuid())
  jobId                String
  userId               String
  status               JobStatus @default(PENDING)
  resume               String?
  coverLetter          String?
  appliedAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  isDeleted            Boolean   @default(false)
  isShortlisted        Boolean   @default(false)
  isAccepted           Boolean   @default(false)
  isRejected           Boolean   @default(false)
  isWithdrawn          Boolean   @default(false)
  isArchived           Boolean   @default(false)
  isFlagged            Boolean   @default(false)
  isReported           Boolean   @default(false)
  isSpam               Boolean   @default(false)
  isBlocked            Boolean   @default(false)
  isSuspended          Boolean   @default(false)
  isBanned             Boolean   @default(false)
  isDeactivated        Boolean   @default(false)
  isDeletedByUser      Boolean   @default(false)
  isDeletedByAdmin     Boolean   @default(false)
  isDeletedBySystem    Boolean   @default(false)
  isDeletedByModerator Boolean   @default(false)
  isDeletedByOwner     Boolean   @default(false)
  isDeletedByCompany   Boolean   @default(false)
  isDeletedByRecruiter Boolean   @default(false)
  isDeletedByInvestor  Boolean   @default(false)
  isDeletedByJobseeker Boolean   @default(false)
  email                String    @map("email")
  fullName             String
  cv                   String?
  message              String?
  job                  Job       @relation(fields: [jobId], references: [id])
  user                 User      @relation(fields: [userId], references: [id])
}

enum Role {
  jobseeker
  recruiter
  investor
}

enum Weekday {
  Sun
  Mon
  Tue
  Wed
  Thu
  Fri
  Sat
}

enum JobLocation {
  REMOTE
  ONSITE
  HYBRID
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  FREELANCE
  INTERN
}

enum SalaryRange {
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
  VERY_LOW
  ULTRA
}

enum FeedType {
  media
  event
  article
  live
  text
}

enum ReportType {
  spam
  inappropriate
  harassment
  violence
  other
}

enum JobStatus {
  PENDING
  REVIEWING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum CountryCode {
  DZ_213
  AO_244
  BJ_229
  BW_267
  BF_226
  BI_257
  CM_237
  CV_238
  CF_236
  TD_235
  KM_269
  CG_242
  CD_243
  DJ_253
  EG_20
  GQ_240
  ER_291
  ET_251
  GA_241
  GM_220
  GH_233
  GN_224
  GW_245
  CI_225
  KE_254
  LS_266
  LR_231
  LY_218
  MG_261
  MW_265
  ML_223
  MR_222
  MU_230
  MA_212
  MZ_258
  NA_264
  NE_227
  NG_234
  RW_250
  ST_239
  SN_221
  SC_248
  SL_232
  SO_252
  ZA_27
  SS_211
  SD_249
  SZ_268
  TZ_255
  TG_228
  TN_216
  UG_256
  ZM_260
  ZW_263
}
